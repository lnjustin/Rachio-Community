/**
 *  Rachio Controller Device Handler
 *
 *  Copyright\u00A9 2018 Anthony Santilli
 *  Copyright\u00A9 2024 JustinL
 *
 *  V1.1.1 written by Anthony Santilli (@tonesto7)
 *  Ported to Hubitat and Enhanced to V2.0 by Justin Leonard (@JustinL)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * Version Info In Rachio Community App
 */

import java.text.SimpleDateFormat
import java.time.*

String devVer() { return "2.0.8" }
Integer statusRefresh() { return 60 }

metadata {
    definition (name: "Rachio Controller", namespace: "lnjustin", author: "Anthony Santilli, Justin Leonard") {
        capability "Refresh"
        capability "Switch"
        capability "Actuator"
        capability "Valve"
        capability "Sensor"
        capability "WaterSensor"
        capability "Polling"
        capability "Health Check"

        attribute "hardwareModel", "string"
        attribute "hardwareDesc", "string"
        attribute "activeZoneCnt", "number"
        attribute "controllerOn", "string"

        attribute "rainDelay","number"
        attribute "rainDelayExpiration","string"
        attribute "rainDelayExpirationStr","string"
        attribute "rainDelayStr", "string"

        attribute "watering", "string"

        //current_schedule data
        attribute "scheduleType", "string"
        attribute "curZoneRunStatus", "string"
        
        attribute "curZoneName", "string"
        attribute "curZoneNumber", "number"
        attribute "curZoneDuration", "number"
        attribute "curZoneStartDate", "string"
        attribute "curZoneIsCycling", "string"
        attribute "curZoneCycleCount", "number"
        attribute "curZoneWaterTime", "number"
        attribute "standbyMode", "string"

        attribute "lastRunStr", "string"
        attribute "lastRun", "string"
        attribute "nextRunStr", "string"
        attribute "nextRun", "string"
        attribute "nextEvent", "string"
        attribute "nextEventTime", "string"
        attribute "nextEventType", "string"
        attribute "nextEventWeatherIntelligence", "string"
        attribute "nextEventThresholdInfo", "string"
        attribute "rainSensorTripped", "boolean"
        
        attribute "monthlyMinutesUsed", "number"
        attribute "monthlyMinutesSaved", "number"
        attribute "monthlyWeatherIntelligenceCount", "number"
        
        attribute "lastUpdatedDt", "string"
        attribute "notificationMessage", "string"
        
        attribute "DeviceWatch-DeviceStatus", "string"
        
        attribute "dashboard", "string"

        command "stopWatering"
        command "setRainDelay", ["number"]

        command "doSetRainDelay"
        command "decreaseRainDelay"
        command "increaseRainDelay"
        command "setZoneWaterTime", ["number"]
        command "decZoneWaterTime"
        command "incZoneWaterTime"
        command "runAllZones"
        command "pauseRun", [[name:"Seconds", type:"NUMBER", description: "Duration for which to pause current run."]]
        command "resumeRun"
        command "standbyOn"
        command "standbyOff"

        command "open"
        command "close"
        
        command(
             "setDashboardColorScheme", 
             [
                [
                     "name":"Dashboard Color Scheme*",
                     "description":"Choose one of several predefined color schemes for the dashboard. Custom must be specified in the Rachio Community App.).",
                     "type":"ENUM",
                     "constraints":["White with Color","Black with Color","White without Color","Black without Color","Custom"]
                ]
             ]
        )
        
        command(
             "setDashboardIconScheme", 
             [
                [
                     "name":"Dashboard Icon Scheme*",
                     "description":"Choose one of several predefined icon schemes for the dashboard.).",
                     "type":"ENUM",
                     "constraints":["Filled","Outline"]
                ]
             ]
        )
    }

    tiles (scale: 2){
        multiAttributeTile(name: "valveTile", type: "generic", width: 6, height: 4) {
            tileAttribute("device.watering", key: "PRIMARY_CONTROL" ) {
                attributeState "on", label: 'Watering', action: "close", icon: "st.valves.water.open", backgroundColor: "#00A7E1", nextState: "off"
                attributeState "off", label: 'Off', action: "runAllZones", icon: "st.valves.water.closed", backgroundColor: "#7e7d7d", nextState:"on"
                attributeState "offline", label: 'Offline', icon: "st.valves.water.closed", backgroundColor: "#FE2E2E"
                attributeState "standby", label: 'Standby Mode', icon: "st.valves.water.closed", backgroundColor: "#FFAE42"
            }
            tileAttribute("device.curZoneRunStatus", key: "SECONDARY_CONTROL") {
                attributeState("default", label:'${currentValue}')
            }
        }
        standardTile("hardwareModel", "device.hardwareModel", inactiveLabel: false, width: 2, height: 2, decoration: "flat") {
            state "default", icon: ""
            state "8ZoneV1", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/8zone_v1.png"
            state "16ZoneV1", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/8zone_v1.png"
            state "8ZoneV2", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/rachio_gen2.png"
            state "16ZoneV2", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/rachio_gen2.png"
            state "8ZoneV3", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/rachio_gen3.png"
            state "8ZoneV3Pro", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/rachio_gen3_pro.png"
	        state "12ZoneV3", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/rachio_gen3.png"
            state "16ZoneV3", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/rachio_gen3.png"
            state "16ZoneV3Pro", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/rachio_gen3.png"
            state "8ZoneV3Lite", icon: "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/rachio_gen3_lite.PNG"
        }
        valueTile("hardwareDesc", "device.hardwareDesc", inactiveLabel: false, width: 4, height: 1, decoration: "flat") {
            state "default", label: 'Model:\n${currentValue}'
        }
        valueTile("activeZoneCnt", "device.activeZoneCnt", inactiveLabel: true, width: 4, height: 1, decoration: "flat") {
            state "default", label: 'Active Zones:\n${currentValue}'
        }
        valueTile("controllerOn", "device.controllerOn", inactiveLabel: true, width: 2, height: 1, decoration: "flat") {
            state "default", label: 'Online Status:\n${currentValue}'
        }
        valueTile("controllerRunStatus", "device.controllerRunStatus", inactiveLabel: true, width: 4, height: 2, decoration: "flat") {
            state "default", label: '${currentValue}'
        }
        valueTile("blank", "device.blank", width: 2, height: 1, decoration: "flat") {
            state("default", label: '')
        }
        standardTile("switch", "device.switch", inactiveLabel: false, decoration: "flat") {
            state "off", icon: "st.switch.off"
            state "on", action: "stopWatering", icon: "st.switch.on"
        }
        // Rain Delay Control
        standardTile("leftButtonControl", "device.rainDelay", inactiveLabel: false, decoration: "flat") {
            state "default", action:"decreaseRainDelay", icon:"st.thermostat.thermostat-left"
        }
        valueTile("rainDelay", "device.rainDelay", width: 2, height: 1, decoration: "flat") {
            state "default", label:'Rain Delay:\n${currentValue} Days'
        }
        standardTile("rightButtonControl", "device.rainDelay", inactiveLabel: false, decoration: "flat") {
            state "default", action:"increaseRainDelay", icon:"st.thermostat.thermostat-right"
        }
        valueTile("applyRainDelay", "device.rainDelayStr", width: 2, height: 1, inactiveLabel: false, decoration: "flat") {
            state "default", label: '${currentValue}', action:'doSetRainDelay'
        }

        //zone Water time control
        valueTile("lastWateredDesc", "device.lastWateredDesc", width: 4, height: 1, decoration: "flat", wordWrap: true) {
            state("default", label: 'Last Watered:\n${currentValue}')
        }
        standardTile("leftZoneTimeButton", "device.curZoneWaterTime", inactiveLabel: false, decoration: "flat") {
            state "default", action:"decZoneWaterTime", icon:"st.thermostat.thermostat-left"
        }
        valueTile("curZoneWaterTime", "device.curZoneWaterTime", width: 2, height: 1, decoration: "flat") {
            state "default", label:'Manual Zone Time:\n${currentValue} Minutes'
        }
        standardTile("rightZoneTimeButton", "device.curZoneWaterTime", inactiveLabel: false, decoration: "flat") {
            state "default", action:"incZoneWaterTime", icon:"st.thermostat.thermostat-right"
        }
        valueTile("runAllZonesTile", "device.curZoneWaterTime", inactiveLabel: false, width: 2 , height: 1, decoration: "flat") {
            state("default", label: 'Run All Zones\n${currentValue} Minutes', action:'runAllZones')
        }
        standardTile("standbyMode", "device.standbyMode", decoration: "flat", wordWrap: true, width: 2, height: 2) {
            state "on", label:'Turn Standby Off', action:"standbyOff", nextState: "false", icon: "http://cdn.device-icons.smartthings.com/sonos/play-icon@2x.png"
            state "off", label:'Turn Standby On', action:"standbyOn", nextState: "true", icon: "http://cdn.device-icons.smartthings.com/sonos/pause-icon@2x.png"
        }
        standardTile("refresh", "device.power", inactiveLabel: false, decoration: "flat", width: 2, height: 2) {
            state "default", label:'', action:"refresh.refresh", icon:"st.secondary.refresh"
        }

    }
    main "valveTile"
    details(["valveTile", "hardwareModel", "hardwareDesc", "activeZoneCnt", "curZoneIsCyclingTile", "leftButtonControl", "rainDelay", "rightButtonControl", "applyRainDelay",
            "leftZoneTimeButton", "curZoneWaterTime", "rightZoneTimeButton", "runAllZonesTile", "pauseZoneRunTile", "lastUpdatedDt", "standbyMode", "refresh"])
}

def setDashboardColorScheme(scheme) {
    parent?.settingUpdate("colorSchemeSelection", scheme, "enum") 
}

def setDashboardIconScheme(scheme) {
    parent?.settingUpdate("iconSchemeSelection", scheme, "enum") 
}

def getAppImg(imgName)	{ return "https://raw.githubusercontent.com/lnjustin/Rachio-Community/master/Images/$imgName" }

// parse events into attributes
def parse(String description) {
    LOG("Parsing '${description}'", 5, "trace")
}

def initialize() {
    sendEvent(name: "DeviceWatch-DeviceStatus", value: "online", displayed: false, isStateChange: true)
    sendEvent(name: "DeviceWatch-Enroll", value: groovy.json.JsonOutput.toJson(["protocol":"cloud", "scheme":"untracked"]), displayed: false)
    
    verifyDataAttr()
}

def verifyDataAttr() {
    updateDataValue("HealthEnrolled", "true")
    updateDataValue("manufacturer", "Rachio")
    def gen = state?.deviceId ? parent?.getDevGeneration(state?.deviceId) : null
    updateDataValue("model", "${device?.name}${gen ? " ($gen)" : ""}")
}

void installed() {
    initialize()
    state.isInstalled = true
}

void updated() {
    initialize()
}

def generateEvent(Map results) {
    if(!state?.swVersion || state?.swVersion != devVer()) {
        initialize()
        state.swVersion = devVer()
    }
    LOG("---------------START OF API RESULTS DATA----------------", 3, "debug")
    if(results) {
        LOG("results: ${results}", 3, "debug")
        state?.deviceId = device?.deviceNetworkId.toString()
        state?.pauseInStandby = (results?.pauseInStandby == true ? true : false)
        hardwareModelEvent(results?.data?.model)
        detailsDataEvent(results?.detailsData)
        activeZoneCntEvent(results?.data?.zones)
        controllerOnEvent(results?.data?.on)
        def isOnline = results?.data?.status == "ONLINE" ? true : false
        state?.isOnline = isOnline
        if(!isOnline) {
            markOffLine()
        } else {
            Boolean standby = results?.data?.on.toString() != "true" ? true : false
            state?.inStandby = standby
            if(isStateChange(device, "standbyMode", (standby?.toString() == "true" ? "on": "off"))) {
                sendEvent(name: 'standbyMode', value: (standby?.toString() == "true" ? "on": "off"), displayed: true, isStateChange: true)
            }
            if(standby == true && results?.pauseInStandby == true) {
                markStandby()
            } else { isWateringEvent(results?.data?.currentSchedule?.status, results?.data?.currentSchedule?.zoneId) }
        }
        if(!device?.currentState("curZoneWaterTime")?.value) { setZoneWaterTime(parent?.getZoneRunTimeDefaultSetting()) }

        def rainDelay = getCurrentRainDelay(results?.data)
        scheduleDataEvent(results?.data?.currentSchedule, results?.data.zones, rainDelay)
        rainDelayValEvent(rainDelay)

        def rainDelayExpiration = getRainDelayExpiration(results?.data)
        rainDelayExpirationEvent(rainDelayExpiration)

        stateDataEvent(results?.stateData)
        wateringSummaryDataEvent(results?.wateringSummaryData)
        nextEventDataEvent(results?.nextEvent)
        setDashboard()         // force dashboard update

        if(isOnline) { lastUpdatedEvent() }
    }
    return "Controller"
}

def getCurrentRainDelay(res) {
    LOG("getCurrentRainDelay", 5, "trace")
    // convert to configured rain delay to days.
    BigDecimal ret =  new BigDecimal(0)
    if (res?.rainDelayExpirationDate) {
        def now = new Date().getTime()
        ret = (res?.rainDelayExpirationDate - now)/(26*60*60*1000)
    }
    LOG("Current Rain Delay is ${ret}", 3, "debug")
    ret = ret.setScale(1, BigDecimal.ROUND_CEILING) // new code that returns partial days
    LOG("Current Rain Delay rounded to ${ret}", 3, "debug")
    Double value = 0
    if (ret > 0) value = ret.doubleValue()
    // def value = (long) Math.floor(ret + 0.5d) // old code that returns integer days
    return value
}

def getRainDelayExpiration(res) {
     LOG("getRainDelayExpiration", 5, "trace")
     def now = new Date().getTime()
    return (res?.rainDelayExpirationDate && res?.rainDelayExpirationDate > now) ? res?.rainDelayExpirationDate : 0
}

def getDurationDesc(long secondsCnt) {
    int seconds = secondsCnt %60
    secondsCnt -= seconds
    long minutesCnt = secondsCnt / 60
    long minutes = minutesCnt % 60
    minutesCnt -= minutes
    long hoursCnt = minutesCnt / 60
    return "${minutes} min ${(seconds >= 0 && seconds < 10) ? "0${seconds}" : "${seconds}"} sec"
}

def getDurationMinDesc(long secondsCnt) {
    int seconds = secondsCnt %60
    secondsCnt -= seconds
    long minutesCnt = secondsCnt / 60
    long minutes = minutesCnt % 60
    minutesCnt -= minutes
    long hoursCnt = minutesCnt / 60
    return "${minutes}"
}

def lastUpdatedEvent() {
    def lastDt = formatDt(new Date())
    def lastUpd = device?.currentState("lastUpdatedDt")?.stringValue
    state?.lastUpdatedDt = lastDt?.toString()
    if(isStateChange(device, "lastUpdatedDt", lastDt.toString())) {
        LOG("${device?.displayName} Status: (${state?.isOnline ? "Online and ${state?.inStandby ? "in Standby Mode" : "Ready"}" : "OFFLINE"}) - Last Updated: (${lastDt})", 4, "info")
        sendEvent(name: 'lastUpdatedDt', value: lastDt?.toString(), displayed: false, isStateChange: true)
    }
}

def markOffLine() {
    if(isStateChange(device, "watering", "offline") || isStateChange(device, "curZoneRunStatus", "Device is Offline")) {
        LOG("UPDATED: Watering is set to (Offline)", 3, "debug")
        sendEvent(name: 'watering', value: "offline", displayed: true, isStateChange: true)
        sendEvent(name: 'valve', value: "closed", displayed: false, isStateChange: true)
        sendEvent(name: 'switch', value: "off", displayed: false, isStateChange: true)
    }
	if(isStateChange(device, "curZoneRunStatus", "Device in Offline")) {
		sendEvent(name: 'curZoneRunStatus', value: "Device is Offline", displayed: false, isStateChange: true)
	}
}

def markStandby() {
    if(isStateChange(device, "watering", "standby") || isStateChange(device, "curZoneRunStatus", "Device in Standby Mode")) {
        LOG("UPDATED: Watering set to (Standby Mode)", 3, "debug")
        sendEvent(name: 'watering', value: "standby", displayed: true, isStateChange: true)
        sendEvent(name: 'valve', value: "closed", displayed: false, isStateChange: true)
        sendEvent(name: 'switch', value: "off", displayed: false, isStateChange: true)
    }
	if(isStateChange(device, "curZoneRunStatus", "Device in Standby Mode")) {
        sendEvent(name: 'curZoneRunStatus', value: "Device in Standby Mode", displayed: false, isStateChange: true)
    }
}

def isWateringEvent(status, zoneId) {
    LOG("isWateringEvent...", 5, "trace")
    def curState = device?.currentState("watering")?.value.toString()
    def isOn = (status == "PROCESSING") ? true : false
    def newState = isOn ? "on" : "off"
    def valveState = isOn ? "open" : "close"
    parent?.setWateringDeviceState(device?.deviceNetworkId, isOn)
    if(isStateChange(device, "watering", newState.toString())) {
        LOG("UPDATED: Watering (${newState}) | Previous: (${curState})", 3, "debug")
        sendEvent(name: 'watering', value: newState, displayed: true, isStateChange: true)
        sendEvent(name: 'valve', value: valveState, displayed: false, isStateChange: true)
        sendEvent(name: 'switch', value: newState, displayed: false, isStateChange: true)
        if(curState != null) { parent?.handleWateringSched(device?.deviceNetworkId, isOn) }
    }
}

def hardwareModelEvent(val) {
    def curModel = device?.currentState("hardwareModel")?.value.toString()
    def curDesc = device?.currentState("hardwareDesc")?.value.toString()
    def newModel = null
    def newDesc = null
    LOG("Rachio Controller Model: ${val}", 3, "debug")
    switch(val) {
        case "GENERATION1_8ZONE":
            newModel = "8ZoneV1"
            newDesc = "8-Zone (Gen 1)"
            state?.controllerDescription = "gen1IrrigationController"
            break
        case "GENERATION1_16ZONE":
            newModel = "16ZoneV1"
            newDesc = "16-Zone (Gen 1)"
            state?.controllerDescription = "gen1IrrigationController"
            break
        case "GENERATION2_8ZONE":
            newModel = "8ZoneV2"
            newDesc = "8-Zone (Gen 2)"
            state?.controllerDescription = "gen2IrrigationController"
            break
        case "GENERATION2_16ZONE":
            newModel = "16ZoneV2"
            newDesc = "16-Zone (Gen 2)"
            state?.controllerDescription = "gen2IrrigationController"
            break
        case "GENERATION3_4ZONE":
            newModel = "4ZoneV3"
            newDesc = "4-Zone (Gen 3)"
            state?.controllerDescription = "gen3IrrigationController"
            break
        case "GENERATION3_8ZONE":
            newModel = "8ZoneV3"
            newDesc = "8-Zone (Gen 3)"
            state?.controllerDescription = "gen3IrrigationController"
            break
        case "GENERATION3_8ZONE_PRO":
            newModel = "8ZoneV3Pro"
            newDesc = "8-Zone (Gen 3) Pro"
            state?.controllerDescription = "gen3IrrigationController"
            break
	    case "GENERATION3_12ZONE":
            newModel = "12ZoneV3"
            newDesc = "12-Zone (Gen 3)"
            state?.controllerDescription = "gen3IrrigationController"
            break
        case "GENERATION3_16ZONE":
            newModel = "16ZoneV3"
            newDesc = "16-Zone (Gen 3)"
            state?.controllerDescription = "gen3IrrigationController"
            break
       case "GENERATION3_16ZONE_PRO":
            newModel = "16ZoneV3Pro"
            newDesc = "16-Zone (Gen 3) Pro"
            state?.controllerDescription = "gen3IrrigationController"
            break
       case "GENERATION3_16ZONE_USI":
            newModel = "16ZoneV3USi"
            newDesc = "16-Zone (Gen 3) USI"
            state?.controllerDescription = "gen3IrrigationController"
            break
        case "GENERATION3_8ZONE_LITE":
            newModel = "8ZoneV3Lite"
            newDesc = "8-Zone (Gen 3 Lite)"
            state?.controllerDescription = "gen3IrrigationController"
            break
    }
    if (newModel == null && val.contains("GENERATION3")) {
        newModel = "V3"
        newDesc = "Gen 3"
        state?.controllerDescription = "gen3IrrigationController"
    }
    if(isStateChange(device, "hardwareModel", newModel.toString())) {
       LOG("UPDATED: Controller Model (${newModel}) | Previous: (${curModel})", 3, "debug")
        sendEvent(name: 'hardwareModel', value: newModel, displayed: true, isStateChange: true)
    }
    if(isStateChange(device, "hardwareDesc", newDesc.toString())) {
        LOG("UPDATED: Controller Description (${newDesc}) | Previous: (${curDesc})", 3, "debug")
        sendEvent(name: 'hardwareDesc', value: newDesc.toString(), displayed: true, isStateChange: true)
    }
}

def activeZoneCntEvent(zData) {
    def curState = device?.currentValue("activeZoneCnt")?.toString()
    def zoneCnt = 0
    if (zData) {
        zData.each { z -> if(z?.enabled.toString() == "true") { zoneCnt = zoneCnt+1 } }
    }
    if(isStateChange(device, "activeZoneCnt", zoneCnt.toString())) {
        LOG("UPDATED: Active Zone Count (${zoneCnt}) | Previous: (${curState})", 3, "debug")
        sendEvent(name: 'activeZoneCnt', value: zoneCnt?.toInteger(), displayed: true, isStateChange: true)
    }
}

def controllerOnEvent(val) {
    def curState = device?.currentState("controllerOn")?.value
    def newState = val?.toString()
    if(isStateChange(device, "controllerOn", newState.toString())) {
        LOG("UPDATED: Controller On Status (${newState}) | Previous: (${curState})", 3, "debug")
        sendEvent(name: 'controllerOn', value: newState, displayed: true, isStateChange: true)
    }
}

def lastWateredDateEvent(val, dur) {
    def newState = "${epochToDt(val)}"
    def newDesc = "${epochToDt(val)}\nDuration: ${getDurationDesc(dur?.toLong())}"
    def curState = device?.currentState("lastWateredDt")?.value
    if(isStateChange(device, "lastWateredDt", newState.toString())) {
        LOG("UPDATED: Last Watered Date (${newState}) | Previous: (${curState})", 3, "debug")
        sendEvent(name: 'lastWateredDt', value: newState, displayed: true, isStateChange: true)
        sendEvent(name: 'lastWateredDesc', value: newDesc, displayed: false, isStateChange: true)
    }
}

def rainDelayValEvent(val) {
    def curState = device?.currentState("rainDelay")?.value.toString()
    def newState = val ? val : 0
    if(isStateChange(device, "rainDelay", newState.toString())) {
        LOG("UPDATED: Rain Delay Value (${newState}) | Previous: (${curState})", 3, "debug")
        sendEvent(name:'rainDelay', value: newState, displayed: true)
        setRainDelayString(newState)
    }
}

def rainDelayExpirationEvent(val) {
    def curState = device?.currentState("rainDelayExpiration")?.value.toString()
    def newState = val ? val : 0
    if(isStateChange(device, "rainDelayExpiration", newState.toString())) {
        LOG("UPDATED: Rain Delay Expires (${newState}) | Previous: (${curState})", 3, "debug")
        sendEvent(name:'rainDelayExpiration', value: newState, displayed: true)
        setRainDelayExpirationString(newState)
    }
}

def setRainDelayExpirationString(val) {
    def rainDelayExpirationStr = "No Manual Rain Delay";
    def rainDelayLeft = device?.currentState("rainDelay")?.value.toString()
    if(val > 0) rainDelayExpirationStr = rainDelayLeft + " Day Manual Rain Delay Remaining. Expires " + epochToDt(val)
    sendEvent( name: "rainDelayExpirationStr", value: rainDelayExpirationStr, isStateChange: true)
}

def setZoneWaterTime(timeVal) {
    def curState = device?.currentState("curZoneWaterTime")?.value.toString()
    def newVal = timeVal ? timeVal.toInteger() : parent?.getZoneRunTimeDefaultSetting()
    if(isStateChange(device, "curZoneWaterTime", newVal.toString())) {
        LOG("UPDATED: Manual Zone Water Time (${newVal}) | Previous: (${curState})", 3, "debug")
        sendEvent(name: 'curZoneWaterTime', value: newVal, displayed: true)
    }
}

def stateDataEvent(stateData) {
    //state?.stateData = stateData
    sendEvent(name:'rainSensorTripped', value: stateData.state?.rainSensorTripped)
    sendEvent(name:'water', value: stateData.state?.rainSensorTripped == true ? "wet" : "dry") 
    if (stateData.state?.lastRun) sendEvent(name:'lastRunStr', value: formatUtcDt(stateData.state?.lastRun))
    if (stateData.state?.lastRun) sendEvent(name:'lastRun', value: getUnixDtFromUTCDt(stateData.state?.lastRun))
    if (stateData.state?.nextRun) sendEvent(name:'nextRunStr', value: formatUtcDt(stateData.state?.nextRun))
    if (stateData.state?.nextRun) sendEvent(name:'nextRun', value: getUnixDtFromUTCDt(stateData.state?.nextRun))
}

def wateringSummaryDataEvent(wateringSummaryData) {
    sendEvent(name: 'monthlyMinutesUsed', value: wateringSummaryData.used.minutes)
    sendEvent(name: 'monthlyMinutesSaved', value: wateringSummaryData.savings.minutes)
    sendEvent(name: 'monthlyWeatherIntelligenceCount', value: wateringSummaryData.wiEventCount)
}

def nextEventDataEvent(nextEventData) {
    if (nextEventData != null && nextEventData.entry != null) {
        sendEvent(name: 'nextEvent', value: nextEventData?.entry?.summary)
        if (nextEventData?.entry?.timestamp) sendEvent(name: 'nextEventTime', value: formatUtcDt(nextEventData?.entry?.timestamp))
        
        def nextEventTypeVal = ""
        switch(nextEventData?.entry?.type) {
            case "FUTURE_FEED_SCHEDULE_EVENT":
                nextEventTypeVal = "Scheduled Run"
                break
            case "RAIN_FUTURE_FEED_SKIP_EVENT":
                nextEventTypeVal = "Predicted Rain Skip"
                break
            case "WIND_FUTURE_FEED_SKIP_EVENT":
                nextEventTypeVal = "Wind Skip"
                break
            case "FREEZE_FUTURE_FEED_SKIP_EVENT":
                nextEventTypeVal = "Freeze Skip"
                break
            case "CLIMATE_FUTURE_FEED_SKIP_EVENT":
                nextEventTypeVal = "Soil Saturated Skip"
                break
            case "MANUAL_FUTURE_FEED_SKIP_EVENT":
                nextEventTypeVal = "Manual Skip"
                break
            default:
                nextEventTypeVal = nextEventData?.entry?.type
        }
        sendEvent(name: 'nextEventType', value: nextEventTypeVal)
        sendEvent(name: 'nextEventWeatherIntelligence', value: nextEventData?.entry?.weatherIntelligenceInfo ?: "None")
        sendEvent(name: 'nextEventThresholdInfo', value: nextEventData?.entry?.thresholdInfo)

        if (!state.nextEventTypes) state.nextEventTypes = []
        if (!state.nextEventTypes.contains(nextEventData?.entry?.type)) state.nextEventTypes.add(nextEventData?.entry?.type)

        if (!state.nextEventWeatherIntel) state.nextEventWeatherIntel = []
        if (!state.nextEventWeatherIntel.contains(nextEventData?.entry?.weatherIntelligenceInfo)) state.nextEventWeatherIntel.add(nextEventData?.entry?.weatherIntelligenceInfo)

    }
    else {
        sendEvent(name: 'nextEvent', value: "None")
        sendEvent(name: 'nextEventTime', value: "None")
        sendEvent(name: 'nextEventType', value: "None")
        sendEvent(name: 'nextEventWeatherIntelligence', value: "None")
        sendEvent(name: 'nextEventThresholdInfo', value: "None")
    }
}


def detailsDataEvent(detailsData) {
    if (detailsData) {
        def controllerDetails = detailsData.get(state?.controllerDescription)
        state?.locationID = controllerDetails.locationId
    }  
}     

def scheduleDataEvent(sData, zData, rainDelay) {
    LOG("scheduleDataEvent($data)...", 5, "trace")
 //   state?.schedData = sData
 //   state?.zoneData = zData
    state?.rainData = rainDelay
    def curSchedType = !sData?.type ? "Off" : sData?.type?.toString().capitalize()
    //def curSchedTypeBtnDesc = (!curSchedType || curSchedType in ["off", "manual"]) ? "Pause Disabled" : "Pause Schedule"
    state.curSchedType = curSchedType
    state?.curScheduleId = !sData?.scheduleId ? null : sData?.scheduleId
    state?.curScheduleRuleId = !sData?.scheduleRuleId ? null : sData?.scheduleRuleId
    def zoneData = sData && zData ? getZoneData(zData, sData?.zoneId) : null
    def zoneId = !zoneData ? null : sData?.zoneId
    def zoneName = !zoneData ? null : zoneData?.name
    def zoneNum = !zoneData ? null : zoneData?.zoneNumber

    def zoneStartDate = sData?.zoneStartDate ? sData?.zoneStartDate : null
    def zoneDuration = sData?.zoneDuration ? sData?.zoneDuration : null
    
    def timeDiff = sData?.zoneStartDate ? GetTimeValDiff(sData?.zoneStartDate.toLong()) : 0
    def elapsedDuration = sData?.zoneStartDate ? getDurationMinDesc(Math.round(timeDiff)) : 0
    def wateringDuration = zoneDuration ? getDurationMinDesc(zoneDuration) : 0
    def zoneRunStatus = ((!zoneStartDate && !zoneDuration) || !zoneId ) ? "Status: Idle" : "${zoneName}: (${elapsedDuration} of ${wateringDuration} Minutes)"

    def zoneCycleCount = !sData?.totalCycleCount ? 0 : sData?.totalCycleCount
    def zoneIsCycling =  !sData?.cycling ? false : sData?.cycling
    def wateringVal = device?.currentState("watering")?.value
    if(isStateChange(device, "scheduleType", curSchedType?.toString().capitalize())) {
        LOG("UPDATED: ScheduleType (${curSchedType})", 4, "info")
        sendEvent(name: 'scheduleType', value: curSchedType?.toString().capitalize(), displayed: true, isStateChange: true)
    }
    if(!state?.inStandby && wateringVal != "offline" && isStateChange(device, "curZoneRunStatus", zoneRunStatus?.toString())) {
        LOG("UPDATED: ZoneRunStatus (${zoneRunStatus})", 4, "info")
        sendEvent(name: 'curZoneRunStatus', value: zoneRunStatus?.toString(), displayed: false, isStateChange: true)
    }
    if(isStateChange(device, "curZoneDuration", zoneDuration?.toString())) {
        LOG("UPDATED: Active Zone Duration (${zoneDuration})", 4, "info")
        sendEvent(name: 'curZoneDuration', value: zoneDuration?.toString(), displayed: true, isStateChange: true)
    }
    if(isStateChange(device, "curZoneName", zoneName?.toString())) {
        LOG("UPDATED: Current Zone Name (${zoneName})", 4, "info")
        sendEvent(name: 'curZoneName', value: zoneName?.toString(), displayed: true, isStateChange: true)
    }
    if(isStateChange(device, "curZoneNumber", zoneNum?.toString())) {
        LOG("UPDATED: Active Zone Number (${zoneNum})", 4, "info")
        sendEvent(name: 'curZoneNumber', value: zoneNum, displayed: true, isStateChange: true)
    }
    if(isStateChange(device, "curZoneCycleCount", zoneCycleCount?.toString())) {
        LOG("UPDATED: Zone Cycle Count (${zoneCycleCount})", 4, "info")
        sendEvent(name: 'curZoneCycleCount', value: zoneCycleCount, displayed: true, isStateChange: true)
    }
    if(isStateChange(device, "curZoneIsCycling", zoneIsCycling?.toString().capitalize())) {
        sendEvent(name: 'curZoneIsCycling', value: zoneIsCycling?.toString().capitalize(), displayed: true, isStateChange: true)
    }
    if(isStateChange(device, "curZoneStartDate", (zoneStartDate ? epochToDt(zoneStartDate).toString() : "Not Active"))) {
        LOG("UPDATED: Zone StartDate (${(zoneStartDate ? epochToDt(zoneStartDate).toString() : "Not Active")})", 4, "info")
        sendEvent(name: 'curZoneStartDate', value: (zoneStartDate ? epochToDt(zoneStartDate).toString() : "Not Active"), displayed: true, isStateChange: true)
    }
}

def getZoneData(zData, zId) {
    if (zData && zId) {
        return zData.find { it?.id == zId }
    }
}

def incZoneWaterTime() {
    LOG("Decrease Zone Runtime", 5, "trace")
    def value = device.latestValue('curZoneWaterTime')
    setZoneWaterTime(value + 1)
}

def decZoneWaterTime() {
    LOG("Increase Zone Runtime", 5, "trace")
    def value = device.latestValue('curZoneWaterTime')
    setZoneWaterTime(value - 1)
}

def setDashboard() {
    parent.setDashboard(state?.deviceId, "irrigation")
}

def setRainDelayString(rainDelay) {
    def rainDelayStr = "No Manual Rain Delay";
    if( rainDelay > 0) {
        rainDelayStr = "Manually Rain Delayed";
    }
    sendEvent( name: "rainDelayStr", value: rainDelayStr, isStateChange: true)
}

def doSetRainDelay() {
    def value = device.latestValue('rainDelay')
    LOG("Set Rain Delay ${value}", 3, "debug")
    def res = parent?.setRainDelay(this, state?.deviceId, value);
    if( !res) {
        markOffLine()
    }
    runIn(2, poll)
}

def updateRainDelay(value) {
    sendEvent( name: "rainDelayStr", value: "Set New Rain Delay", isStateChange: true)
    LOG("Update ${value} ", 3, "debug")
    if( value > 7) {
        value = 7;
    } else if ( value < 0) {
        value = 0
    }
    sendEvent(name: 'rainDelay', value: value, displayed: true)
}

def increaseRainDelay() {
   LOG("Increase Rain Delay", 5, "trace")
    def value = device.latestValue('rainDelay')
    updateRainDelay(value + 1)
}

def decreaseRainDelay() {
    LOG("Decrease Rain Delay", 5, "trace")
    def value = device.latestValue('rainDelay')
    updateRainDelay(value - 1)
}

def refresh() {
    LOG("refresh...", 5, "trace")
    poll()
}

void poll() {
    LOG("Requested Parent Poll...", 5, "trace")
    parent?.poll(this, "irrigationDevice")
}

def isCmdOk2Run() {
    LOG("isCmdOk2Run...", 5, "trace")
    if(state?.isOnline == false) {
        LOG("Skipping the request... Because the zone is unable to send commands while it's in an Offline State.", 1, "warn")
        return false
    }
    if(state?.pauseInStandby == true && state?.inStandby == true) {
        LOG("Skipping the request... Because the controller is unable to send commands while it is in standby mode!!!", 1, "warn")
        return false
    } else { return true }
}

def runAllZones() {
    LOG("runAllZones...", 5, "trace")
    if(!isCmdOk2Run()) { return }
    def waterTime = device?.latestValue('curZoneWaterTime')
    LOG("Sending Run All Zones for (${waterTime} Minutes)", 3, "debug")
    def res = parent?.runAllZones(this, state?.deviceId, waterTime)
    if (!res) {
        markOffLine()
    }
}

def pauseRun(duration) {
    if(!isCmdOk2Run()) { return }
    def res = parent?.pauseZoneRun(this, state?.deviceId, duration)
    if (!res) {
        markOffLine()
    }
}

def resumeRun() {
    if(!isCmdOk2Run()) { return }
    def res = parent?.resumeZoneRun(this, state?.deviceId)
    if (!res) {
        markOffLine()
    }
}

def standbyOn() {
    LOG("standbyOn...", 5, "trace")
    def inStandby = device?.currentState("standbyMode")?.value.toString() == "on" ? true : false
    if(device?.currentState("watering")?.value == "offline") {
        LOG("Device is currently Offline... Ignoring...", 5, "trace")
    } else if (!inStandby) {
        if(parent?.standbyOn(this, state?.deviceId)) {
            sendEvent(name: 'standbyMode', value: "on", displayed: true, isStateChange: true)
        }
    } else { LOG("Device is Already in Standby... Ignoring...", 5, "trace") }
}

def standbyOff() {
    LOG("standbyOff...", 5, "trace")
    def inStandby = device?.currentState("standbyMode")?.value.toString() == "on" ? true : false
    if(device?.currentState("watering")?.value == "offline") {
        LOG("Device is currently Offline... Ignoring...", 5, "trace")
    } else if (inStandby) {
        if(parent?.standbyOff(this, state?.deviceId)) {
            sendEvent(name: 'standbyMode', value: "off", displayed: true, isStateChange: true)
        }
    } else { LOG("Device is Already out of Standby... Ignoring...", 5, "trace") }
}

def on() {
    LOG("on...", 5, "trace")
    if(!isCmdOk2Run()) { return }
    def isOn = device?.currentState("switch")?.value.toString() == "on" ? true : false
    if (!isOn) { open() }
    else { LOG("Switch is Already ON... Ignoring...", 5, "trace") }
}

def off() {
    LOG("off...", 5, "trace")
    //if(!isCmdOk2Run()) { return }
    def isOff = device?.currentState("switch")?.value.toString() == "off" ? true : false
    if (!isOff) { close() }
    else { LOG("Switch is Already OFF... Ignoring...", 5, "trace") }
}

def open() {
    LOG("open()...", 5, "trace")
    LOG("open command is not currently supported by the controller device...", 4, "info")
}

def close() {
   LOG("close()...", 5, "trace")
    //if(!isCmdOk2Run()) { return }
    def isClosed = device?.currentState("valve")?.value.toString() == "closed" ? true : false
    if (!isClosed) {
        def res = parent?.off(this, state?.deviceId)
        if (res) {
            sendEvent(name:'watering', value: "off", displayed: true, isStateChange: true)
            sendEvent(name:'switch', value: "off", displayed: false, isStateChange: true)
            sendEvent(name:'valve', value: "closed", displayed: false, isStateChange: true)
        } else {
            LOG("close(). marking offline", 5, "trace")
            markOffLine();
        }
    }
    else { LOG("Close command Ignored... The Valve is Already Closed", 4, "info") }
}

// To be used directly by smart apps
def stopWatering() {
    LOG("stopWatering", 5, "trace")
    close()
}


def setRainDelay(rainDelay) {
    sendEvent("name":"rainDelay", "value": rainDelay)
    def res = parent?.setRainDelay(this, state?.deviceId, rainDelay);
    runIn(2, poll)
}

def getDtNow() {
	def now = new Date()
	return formatDt(now, false)
}

def epochToDt(val) {
    return formatDt(new Date(val))
}

def formatDt(dt, mdy = true) {
	LOG("formatDt($dt, $mdy)...", 5, "trace")
	def formatVal = mdy ? "MMM d, yyyy - h:mm:ss a" : "E MMM dd HH:mm:ss z yyyy"
	def tf = new SimpleDateFormat(formatVal)
	if(location?.timeZone) { tf.setTimeZone(location?.timeZone) }
	return tf.format(dt)
}

def getUnixDtFromUTCDt(utcDt) {
    return Date.parse("yyyy-MM-dd'T'HH:mm:ss'Z'", utcDt).getTime()
}

def formatUtcDt(utcDt, mdy = true) {
    def inFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    inFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    
	LOG("formatDt($dt, $mdy)...", 5, "trace")
	def formatVal = mdy ? "MMM d, yyyy - h:mm:ss a" : "E MMM dd HH:mm:ss z yyyy"
	def outFormat = new SimpleDateFormat(formatVal)
    if(location?.timeZone) { outFormat.setTimeZone(location?.timeZone) }
    
    if (parent?.debugLogging) {  LOG("Formatting utcDt of ${utcDt}", 3, "debug") }
    
    def ret = null
    if (utcDt != null) {
        ret = outFormat.format(inFormat.parse(utcDt))
    }
	return ret
}

def formatUtcDtNoTime(utcDt) {
    def inFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    inFormat.setTimeZone(TimeZone.getTimeZone("UTC"))
    
	LOG("formatDt($dt, $mdy)...", 5, "trace")
	def formatVal = "MMM d, yyyy"
	def outFormat = new SimpleDateFormat(formatVal)
    if(location?.timeZone) { outFormat.setTimeZone(location?.timeZone) }
    
	return outFormat.format(inFormat.parse(utcDt))
}

//Returns time differences is seconds
def GetTimeValDiff(timeVal) {
    try {
        def start = new Date(timeVal).getTime()
        def now = new Date().getTime()
        def diff = (int) (long) (now - start) / 1000
        LOG("diff: $diff", 3, "debug")
        return diff
    }
    catch (ex) {
        LOG("GetTimeValDiff Exception: ${ex}", 1, "error")
        return 1000
    }
}

def getTimeDiffSeconds(strtDate, stpDate=null) {
	if((strtDate && !stpDate) || (strtDate && stpDate)) {
		def now = new Date()
		def stopVal = stpDate ? stpDate.toString() : formatDt(now, false)
		def start = Date.parse("E MMM dd HH:mm:ss z yyyy", strtDate).getTime()
		def stop = Date.parse("E MMM dd HH:mm:ss z yyyy", stopVal).getTime()
		def diff = (int) (long) (stop - start) / 1000
		return diff
	} else { return null }
}

// generate custom mobile activity feeds event
void generateActivityFeedsEvent(notificationMessage) {
	sendEvent(name: "notificationMessage", value: "${device.name} ${notificationMessage}", descriptionText: "${device.name} ${notificationMessage}", isStateChange: true)
}

static String getTimestamp() {
	return new Date().format("yyyy-MM-dd HH:mm:ss z")
}

void LOG(String message, Integer level=3, String logType="debug") {
    String dbg=parent.getDebugLevel() == null ? "2" : parent.getDebugLevel()
	Integer dbgLevel = dbg.toInteger()
	if (logType == "error") {
		String a=getTimestamp()
		state.lastLOGerror="${message} @ "+a
		state.LastLOGerrorDate=a
	} else {
		if(level > dbgLevel) return
	}
    def List<String> lLOGTYPES =	['error', 'debug', 'info', 'trace', 'warn']
	if(!lLOGTYPES.contains(logType)) {
		logerror("LOG() - Received logType (${logType}) which is not in the list of allowed types ${lLOGTYPES}, message: ${message}, level: ${level}")
		logType="debug"
	}
    if (logType == "debug") log.debug(message)
    else if (logType == "error") log.error(message)
    else if (logType == "info") log.info(message)
    else if (logType == "trade") log.trace(message)
    else if (logType == "warn") log.warn(message)
}
